apiVersion: apps/v1
kind: Deployment
metadata:
  name: scscf
  labels:
    io.kompose.service: scscf
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scscf
  template:
    metadata:
      labels:
        io.kompose.service: scscf
    spec:
      containers:
        - name: scscf
          image: localhost/docker_kamailio:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting SCSCF with complete Diameter configuration..."
              
              # Get HSS service IP and add to /etc/hosts
              echo "=== Resolving HSS Service IP ==="
              HSS_IP=$(getent hosts hss.ims.svc.cluster.local | awk '{ print $1 }')
              if [ -z "$HSS_IP" ]; then
                echo "Waiting for HSS service..."
                for i in {1..30}; do
                  HSS_IP=$(getent hosts hss.ims.svc.cluster.local | awk '{ print $1 }')
                  if [ -n "$HSS_IP" ]; then
                    break
                  fi
                  sleep 2
                done
              fi
              
              echo "HSS Service IP: $HSS_IP"
              
              # Add HSS to /etc/hosts
              if [ -n "$HSS_IP" ]; then
                sed -i '/hss.localdomain/d' /etc/hosts
                echo "$HSS_IP hss.localdomain hss" >> /etc/hosts
                echo "✓ Added hss.localdomain -> $HSS_IP to /etc/hosts"
              fi
              
              # Copy config files
              cp /etc/kamailio-config/* /usr/local/etc/kamailio/ 2>/dev/null || true
              
              # Get IPs
              POD_IP=$(hostname -i)
              MYSQL_SERVICE_IP="mysql.ims.svc.cluster.local"
              HSS_SERVICE_IP="hss.ims.svc.cluster.local"
              ICSCF_SERVICE_IP="icscf.ims.svc.cluster.local"
              echo "Pod IP: $POD_IP"
              
              # Wait for MySQL
              echo "Waiting for MySQL..."
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/mysql.ims.svc.cluster.local/3306' 2>/dev/null; then
                  echo "✓ MySQL is ready!"
                  break
                fi
                sleep 3
              done

              # Wait for HSS
              echo "Waiting for HSS Diameter port..."
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/hss.ims.svc.cluster.local/3868' 2>/dev/null; then
                  echo "✓ HSS Diameter port is ready!"
                  break
                fi
                sleep 3
              done
              
              # Create directories
              mkdir -p /etc/kamailio_scscf
              mkdir -p /etc/kamailio_icscf  
              mkdir -p /etc/kamailio_pcscf
              
              # Copy XSD files if they exist
              echo "=== Copying XSD files ==="
              if [ -f "/usr/local/etc/kamailio/CxDataType_Rel7.xsd" ]; then
                cp /usr/local/etc/kamailio/*.xsd /etc/kamailio_scscf/ 2>/dev/null
                echo "✓ XSD files copied from /usr/local/etc/kamailio"
              elif [ -f "/etc/kamailio-config/CxDataType_Rel7.xsd" ]; then
                cp /etc/kamailio-config/*.xsd /etc/kamailio_scscf/ 2>/dev/null
                echo "✓ XSD files copied from /etc/kamailio-config"
              else
                echo "⚠ XSD files not found, creating minimal placeholder"
                cat > /etc/kamailio_scscf/CxDataType_Rel7.xsd << 'XSDEOF'
              <?xml version="1.0" encoding="UTF-8"?>
              <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                         targetNamespace="http://www.3gpp.org/ftp/Specs/archive/29_series/29.229#CxDataType_Rel7"
                         xmlns="http://www.3gpp.org/ftp/Specs/archive/29_series/29.229#CxDataType_Rel7"
                         elementFormDefault="qualified">
                  <xs:element name="IMSSubscription" type="xs:string"/>
              </xs:schema>
              XSDEOF
                echo "✓ Placeholder XSD created"
              fi
              
              # Create dispatcher.list
              if [ -f "/usr/local/etc/kamailio/dispatcher.list" ]; then
                cp /usr/local/etc/kamailio/dispatcher.list /etc/kamailio_scscf/
              else
                echo "# SCSCF Dispatcher List" > /etc/kamailio_scscf/dispatcher.list
              fi
              
              # Create scscf.xml with proper configuration and local address
              echo "=== Creating scscf.xml with Pod IP ==="
              cat > /etc/kamailio_scscf/scscf.xml << XMLEOF
              <?xml version="1.0" encoding="UTF-8"?>
              <DiameterPeer
                      FQDN="scscf.localdomain"
                      Realm="localdomain"
                      Vendor_Id="10415"
                      Product_Name="CDiameterPeer"
                      AcceptUnknownPeers="1"
                      DropUnknownOnDisconnect="1"
                      Tc="30"
                      Workers="4"
                      QueueLength="32"
                      TransactionTimeout="10"
                      SessionsHashSize="128"
                      DefaultAuthSessionTimeout="3600"
                      MaxAuthSessionTimeout="3600"
              >
                      <Peer FQDN="hss.localdomain" Realm="localdomain" port="3868"/>

                      <Acceptor port="6060" bind="$POD_IP"/>
                      <Acceptor port="6060" bind="0.0.0.0"/>

                      <Auth id="16777216" vendor="10415"/>
                      <Auth id="16777216" vendor="4491"/>
                      <Auth id="16777216" vendor="13019"/>
                      <Auth id="16777216" vendor="0"/>

                      <Auth id="4" vendor="10415"/>
                      <Acct id="4" vendor="10415"/>

                      <SupportedVendor vendor="10415"/>

                      <DefaultRoute FQDN="hss.localdomain" metric="10"/>
              </DiameterPeer>
              XMLEOF

              echo "✓ scscf.xml created with POD_IP=$POD_IP"
              cat /etc/kamailio_scscf/scscf.xml | grep -E "bind|FQDN|Realm"
              
              # Variable replacement
              echo "=== Processing configuration files ==="
              find /usr/local/etc/kamailio -type f | while read file; do
                if [ -f "$file" ]; then
                  sed -i "s/SCSCF_IP/$POD_IP/g" "$file"
                  sed -i "s/LISTEN_IP/$POD_IP/g" "$file"
                  sed -i "s/NETWORK_IP/$POD_IP/g" "$file"
                  sed -i "s/MYSQL_IP/$MYSQL_SERVICE_IP/g" "$file"
                  sed -i "s/HSS_IP/$HSS_SERVICE_IP/g" "$file"
                  sed -i "s/ICSCF_IP/$ICSCF_SERVICE_IP/g" "$file"
                  sed -i "s/IMS_DOMAIN/localdomain/g" "$file"
                  sed -i 's/UE_SUBSCRIPTION_EXPIRES/3605/g' "$file"
                  sed -i 's/SUBSCRIPTION_EXPIRES_ENV/3605/g' "$file"
                  sed -i 's/TCP_PROCESSES/4/g' "$file"
                  sed -i 's/SCSCF_PROCESSES/4/g' "$file"
                  sed -i 's/SHM_MEM/64/g' "$file"
                  sed -i 's/PKG_MEM/8/g' "$file"
                  sed -i "s/listen=tcp:127.0.0.1:6060/listen=tcp:$POD_IP:6060/g" "$file"
                  sed -i "s/listen=udp:.*:5060/listen=udp:$POD_IP:5060/g" "$file"
                  sed -i "s/listen=tcp:.*:5060/listen=tcp:$POD_IP:5060/g" "$file"
                fi
              done
              
              # Fix preprocessor directives
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                temp_file=$(mktemp)
                awk '
                  /^[[:space:]]*#!endif/ { print "#!endif"; next }
                  { print }
                  END { print "" }
                ' "$file" > "$temp_file"
                mv "$temp_file" "$file"
              done
              
              # Create MySQL user
              mysql -h mysql.ims.svc.cluster.local -u root -plinux -e "
                CREATE USER IF NOT EXISTS 'scscf'@'%' IDENTIFIED BY 'heslo';
                GRANT ALL PRIVILEGES ON scscf.* TO 'scscf'@'%';
                FLUSH PRIVILEGES;
              " 2>/dev/null || true
              
              # Verify setup
              echo "=== Verification ==="
              echo "Files in /etc/kamailio_scscf:"
              ls -la /etc/kamailio_scscf/
              echo ""
              echo "DNS resolution test:"
              getent hosts hss.localdomain
              echo ""
              echo "Connectivity test:"
              timeout 3 bash -c '</dev/tcp/hss.localdomain/3868' && echo "✓ Can connect to HSS" || echo "✗ Cannot connect to HSS"
              
              # Set library path
              export LD_LIBRARY_PATH="/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH"
              
              # Test configuration
              echo "=== Testing Kamailio configuration ==="
              if kamailio -c -f /usr/local/etc/kamailio/kamailio_scscf.cfg 2>&1 | tee /tmp/kamailio-test.log; then
                echo "✓ Configuration OK"
                echo "=== Starting Kamailio SCSCF ==="
                exec kamailio -f /usr/local/etc/kamailio/kamailio_scscf.cfg -P /tmp/kamailio.pid -DD -E -e
              else
                echo "✗ Configuration error:"
                cat /tmp/kamailio-test.log
                sleep infinity
              fi
          env:
            - name: COMPONENT_NAME
              value: scscf
          volumeMounts:
            - name: scscf-config
              mountPath: /etc/kamailio-config
          ports:
            - containerPort: 5060
              protocol: UDP
            - containerPort: 5060
              protocol: TCP
            - containerPort: 6060
              protocol: UDP
            - containerPort: 6060
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - pgrep
                - kamailio
            initialDelaySeconds: 45
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6060
            initialDelaySeconds: 20
            periodSeconds: 5
      volumes:
        - name: scscf-config
          configMap:
            name: scscf-config
      restartPolicy: Always
