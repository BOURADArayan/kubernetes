apiVersion: apps/v1
kind: Deployment
metadata:
  name: icscf
  labels:
    io.kompose.service: icscf
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: icscf
  template:
    metadata:
      labels:
        io.kompose.service: icscf
    spec:
      containers:
        - name: icscf
          image: localhost/docker_kamailio:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting ICSCF with complete Diameter configuration..."
              
              # Copy files
              cp /etc/kamailio-config/* /usr/local/etc/kamailio/ 2>/dev/null || true
              
              # Get IPs
              POD_IP=$(hostname -i)
              MYSQL_SERVICE_IP="mysql.ims.svc.cluster.local"
              HSS_SERVICE_IP="hss.ims.svc.cluster.local"
              echo "Pod IP: $POD_IP"
              
              # Get HSS service IP and add to /etc/hosts (comme SCSCF)
              echo "=== Resolving HSS Service IP ==="
              HSS_IP=$(getent hosts hss.ims.svc.cluster.local | awk '{ print $1 }')
              if [ -z "$HSS_IP" ]; then
                echo "Waiting for HSS service..."
                for i in {1..30}; do
                  HSS_IP=$(getent hosts hss.ims.svc.cluster.local | awk '{ print $1 }')
                  if [ -n "$HSS_IP" ]; then
                    break
                  fi
                  sleep 2
                done
              fi
              
              echo "HSS Service IP: $HSS_IP"
              
              # Add HSS to /etc/hosts (comme SCSCF)
              if [ -n "$HSS_IP" ]; then
                sed -i '/hss.localdomain/d' /etc/hosts
                echo "$HSS_IP hss.localdomain hss" >> /etc/hosts
                echo "✓ Added hss.localdomain -> $HSS_IP to /etc/hosts"
              fi
              
              # Wait for MySQL
              echo "=== Waiting for MySQL ==="
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/mysql.ims.svc.cluster.local/3306' 2>/dev/null; then
                  echo "✓ MySQL is ready!"
                  break
                else
                  echo "MySQL not ready, waiting... ($i/20)"
                  sleep 3
                fi
              done
              
              # Wait for HSS Diameter port (comme SCSCF)
              echo "Waiting for HSS Diameter port..."
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/hss.ims.svc.cluster.local/3868' 2>/dev/null; then
                  echo "✓ HSS Diameter port is ready!"
                  break
                fi
                sleep 3
              done
              
              # Create required directories for ICSCF
              echo "=== Creating ICSCF directories ==="
              mkdir -p /etc/kamailio_icscf
              
              # Create icscf.xml with proper Diameter configuration (comme SCSCF)
              echo "=== Creating icscf.xml with Pod IP and HSS peer ==="
              cat > /etc/kamailio_icscf/icscf.xml << XMLEOF
              <?xml version="1.0" encoding="UTF-8"?>
              <DiameterPeer
                      FQDN="icscf.localdomain"
                      Realm="localdomain"
                      Vendor_Id="10415"
                      Product_Name="CDiameterPeer"
                      AcceptUnknownPeers="1"
                      DropUnknownOnDisconnect="1"
                      Tc="30"
                      Workers="4"
                      QueueLength="32"
                      TransactionTimeout="10"
                      SessionsHashSize="128"
                      DefaultAuthSessionTimeout="3600"
                      MaxAuthSessionTimeout="3600"
              >
                      <Peer FQDN="hss.localdomain" Realm="localdomain" port="3868"/>

                      <Acceptor port="3869" bind="$POD_IP"/>
                      <Acceptor port="3869" bind="0.0.0.0"/>

                      <Auth id="16777216" vendor="10415"/>
                      <Auth id="16777216" vendor="4491"/>
                      <Auth id="16777216" vendor="13019"/>
                      <Auth id="16777216" vendor="0"/>

                      <Auth id="4" vendor="10415"/>
                      <Acct id="4" vendor="10415"/>

                      <SupportedVendor vendor="10415"/>

                      <DefaultRoute FQDN="hss.localdomain" metric="10"/>
              </DiameterPeer>
              XMLEOF

              echo "✓ icscf.xml created with POD_IP=$POD_IP on Diameter port 3869"
              cat /etc/kamailio_icscf/icscf.xml | grep -E "bind|FQDN|Realm|Peer"
              
              # Create MySQL user for ICSCF
              mysql -h mysql.ims.svc.cluster.local -u root -plinux -e "
                CREATE USER IF NOT EXISTS 'icscf'@'%' IDENTIFIED BY 'heslo';
                GRANT ALL PRIVILEGES ON icscf.* TO 'icscf'@'%';
                CREATE DATABASE IF NOT EXISTS icscf;
                FLUSH PRIVILEGES;
              " 2>/dev/null || echo "MySQL user creation skipped (may already exist)"
              
              # Comprehensive variable replacement
              echo "=== Comprehensive variable replacement ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                echo "Processing variables in: $file"
                sed -i "s/ICSCF_IP/$POD_IP/g" "$file"
                sed -i "s/LISTEN_IP/$POD_IP/g" "$file"
                sed -i "s/NETWORK_IP/$POD_IP/g" "$file"
                sed -i "s/MYSQL_IP/$MYSQL_SERVICE_IP/g" "$file"
                sed -i "s/HSS_IP/$HSS_SERVICE_IP/g" "$file"
                sed -i 's/UE_SUBSCRIPTION_EXPIRES/3605/g' "$file"
                sed -i 's/SUBSCRIPTION_EXPIRES_ENV/3605/g' "$file"
                sed -i 's/TCP_PROCESSES/4/g' "$file"
                sed -i 's/ICSCF_PROCESSES/4/g' "$file"
                sed -i 's/SHM_MEM/64/g' "$file"
                sed -i 's/PKG_MEM/8/g' "$file"
                sed -i "s/listen=tcp:127.0.0.1:4060/listen=tcp:$POD_IP:4060/g" "$file"
              done
              
              # CORRECTION GLOBALE : Équilibrer les directives dans TOUS les fichiers
              echo "=== Global preprocessor directive balancing ==="
              
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              
              echo "Global count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              if [ $total_ifdef -gt $total_endif ]; then
                missing=$((total_ifdef - total_endif))
                echo "⚠ Missing $missing #!endif directive(s) - Adding to main config"
                
                for i in $(seq 1 $missing); do
                  echo "" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                  echo "#!endif" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                done
              else
                # FORCE: Même si équilibré, Kamailio compte mal à cause du contexte entre fichiers
                echo "⚠ Counts balanced but forcing +1 #!endif for Kamailio parser context"
                echo "" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                echo "#!endif" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
              fi
              
              # Nettoyer tous les fichiers
              echo "=== Cleaning all config files ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                temp_file=$(mktemp)
                sed 's/#!endif.*/#!endif/' "$file" | awk '{ print }' > "$temp_file"
                echo "" >> "$temp_file"
                echo "" >> "$temp_file"
                mv "$temp_file" "$file"
              done
              
              # Vérification finale
              echo "=== Final global verification ==="
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              echo "Final count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              # Verify Diameter connectivity (comme SCSCF)
              echo "=== Verification DNS et Connectivité ==="
              echo "DNS resolution test:"
              getent hosts hss.localdomain
              echo ""
              echo "Connectivity test to HSS:"
              timeout 3 bash -c '</dev/tcp/hss.localdomain/3868' && echo "✓ Can connect to HSS Diameter" || echo "✗ Cannot connect to HSS Diameter"
              
              # Set library path
              export LD_LIBRARY_PATH="/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH"
              
              echo "=== Testing Kamailio configuration ==="
              if kamailio -c -f /usr/local/etc/kamailio/kamailio_icscf.cfg; then
                echo "✓ Configuration syntax OK - Starting Kamailio ICSCF..."
                exec kamailio -f /usr/local/etc/kamailio/kamailio_icscf.cfg -P /tmp/kamailio.pid -DD -E -e
              else
                echo "✗ Configuration error - per-file analysis:"
                find /usr/local/etc/kamailio -name "*.cfg" -exec sh -c 'echo "=== {} ==="; grep -c "#!ifdef\|#!ifndef" {} | xargs echo "ifdef/ifndef:"; grep -c "#!endif" {} | xargs echo "endif:"' \;
                kamailio -c -f /usr/local/etc/kamailio/kamailio_icscf.cfg 2>&1 | head -10
                sleep infinity
              fi
          env:
            - name: COMPONENT_NAME
              value: icscf
          volumeMounts:
            - name: icscf-config
              mountPath: /etc/kamailio-config
          ports:
            - containerPort: 5060
              protocol: UDP
            - containerPort: 5060
              protocol: TCP
            - containerPort: 4060
              protocol: TCP
            - containerPort: 4060
              protocol: UDP
            - containerPort: 3869
              protocol: TCP
              name: diameter
          livenessProbe:
            exec:
              command:
                - pgrep
                - kamailio
            initialDelaySeconds: 45
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3869
            initialDelaySeconds: 20
            periodSeconds: 5
      volumes:
        - name: icscf-config
          configMap:
            name: icscf-config
      restartPolicy: Always
